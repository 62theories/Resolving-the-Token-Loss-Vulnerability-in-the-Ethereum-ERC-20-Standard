import {
  time,
  loadFixture,
} from "@nomicfoundation/hardhat-toolbox/network-helpers";
import { anyValue } from "@nomicfoundation/hardhat-chai-matchers/withArgs";
import { expect } from "chai";
import { ethers } from "hardhat";
import {
  ERC1363ReceiveContract,
  ERC1363Simple,
  SimpleERC20,
} from "../typechain-types";

describe("", function () {
  async function deployOneYearLockFixture() {
    const ONE_YEAR_IN_SECS = 365 * 24 * 60 * 60;
    const ONE_GWEI = 1_000_000_000;

    const lockedAmount = ONE_GWEI;
    const unlockTime = (await time.latest()) + ONE_YEAR_IN_SECS;

    // Contracts are deployed using the first signer/account by default
    const [owner, otherAccount] = await ethers.getSigners();

    const Lock = await ethers.getContractFactory("ERC1363Simple");
    const token: ERC1363Simple = await Lock.deploy("name", "symbol");

    const eRC1363ReceiveContract = await ethers.getContractFactory(
      "ERC1363ReceiveContract"
    );
    const receiver: ERC1363ReceiveContract =
      await eRC1363ReceiveContract.deploy();

    return { token, receiver, unlockTime, lockedAmount, owner, otherAccount };
  }

  it("", async function () {
    const { token, owner, receiver } = await loadFixture(
      deployOneYearLockFixture
    );
    const [, otherAccount] = await ethers.getSigners();
    await token["transferAndCall(address,uint256)"](
      await receiver.getAddress(),
      1
    );
  });
});
